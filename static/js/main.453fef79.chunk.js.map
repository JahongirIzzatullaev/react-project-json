{"version":3,"sources":["components/Posts.js","components/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["Posts","posts","loading","className","map","post","key","id","src","thumbnailUrl","width","alt","title","Pagination","totalPosts","paginate","pageNumbers","i","push","number","onClick","href","App","useState","setPosts","setLoading","currentPage","setCurrentPage","postPerPage","useEffect","a","axios","get","res","data","fetchPosts","indexLastPosts","indexFirstPosts","currentPosts","slice","paginateLength","Math","ceil","length","pageNumber","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SAyBeA,G,MAvBD,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MACZ,OADgC,EAAbC,QAER,wBAAIC,UAAU,gBAAd,cAGP,yBAAKA,UAAU,OACVF,EAAMG,KAAI,SAAAC,GAAI,OACX,yBAAKC,IAAKD,EAAKE,GAAIJ,UAAU,YACzB,yBAAKA,UAAU,aACX,yBAAKK,IAAKH,EAAKI,aAAcC,MAAM,OAAOC,IAAI,KAC9C,yBAAKR,UAAU,aACX,wBAAIA,UAAU,cAAd,eAAwCE,EAAKE,IAC7C,uBAAGJ,UAAU,aACRE,EAAKO,gBCKvBC,EAlBI,SAAC,GAEhB,IAF4C,IAA3BC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,SACvBC,EAAc,GACXC,EAAI,EAAGA,GAAKH,EAAYG,IAC7BD,EAAYE,KAAKD,GAErB,OACI,6BACI,wBAAId,UAAU,cACTa,EAAYZ,KAAI,SAAAe,GAAM,OACnB,wBAAIb,IAAKa,EAAQhB,UAAU,aACvB,uBAAGiB,QAAS,kBAAML,EAASI,IAASE,KAAK,KAAKlB,UAAU,aAAagB,UC2B9EG,MAjCf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJtB,EADI,KACGuB,EADH,OAEmBD,oBAAS,GAF5B,mBAEJrB,EAFI,KAEKuB,EAFL,OAG2BF,mBAAS,GAHpC,mBAGJG,EAHI,KAGSC,EAHT,OAIWJ,mBAAS,IAAxBK,EAJI,oBAKXC,qBAAU,YACU,uCAAG,4BAAAC,EAAA,6DACfL,GAAW,GADI,SAEGM,IAAMC,IAAI,0DAFb,OAETC,EAFS,OAGfT,EAASS,EAAIC,MACbT,GAAW,GAJI,2CAAH,qDAMhBU,KACD,IAEH,IAAMC,EAAiBV,EAAcE,EAC/BS,EAAkBD,EAAiBR,EACnCU,EAAerC,EAAMsC,MAAMF,EAAiBD,GAI5CI,EAAiBC,KAAKC,KAAKzC,EAAM0C,OAASf,GAEhD,OACI,yBAAKzB,UAAU,kBACX,wBAAIA,UAAU,qBAAd,WAEA,kBAAC,EAAD,CAAYW,WAAY0B,EAAgBzB,SAP/B,SAAC6B,GAAD,OAAgBjB,EAAeiB,MAQxC,kBAAC,EAAD,CAAO3C,MAAOqC,EAAcpC,QAASA,MCtB7B2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.453fef79.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Posts = ({posts, loading}) => {\r\n    if (loading) {\r\n        return <h2 className=\"text-primary\">Loading...</h2>\r\n    }\r\n    return (\r\n        <div className=\"row\">\r\n            {posts.map(post => (\r\n                <div key={post.id} className=\"col-md-3\">\r\n                    <div className=\"card mb-5\">\r\n                        <img src={post.thumbnailUrl} width=\"100%\" alt=\"\"/>\r\n                        <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">Card number {post.id}</h5>\r\n                            <p className=\"card-text\">\r\n                                {post.title}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Posts","import React from \"react\";\r\n\r\nconst Pagination = ({totalPosts, paginate}) => {\r\n    const pageNumbers = [];\r\n    for (let i = 1; i <= totalPosts; i++) {\r\n        pageNumbers.push(i);\r\n    }\r\n    return (\r\n        <nav>\r\n            <ul className=\"pagination\">\r\n                {pageNumbers.map(number => (\r\n                    <li key={number} className=\"page-item\">\r\n                        <a onClick={() => paginate(number)} href=\"!#\" className=\"page-link\">{number}</a>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Pagination","import React, {useState, useEffect} from 'react';\nimport axios from 'axios'\nimport './App.css';\nimport Posts from \"./components/Posts\";\nimport Pagination from \"./components/Pagination\";\n\nfunction App() {\n    const [posts, setPosts] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [postPerPage] = useState(10);\n    useEffect(() => {\n        const fetchPosts = async () => {\n            setLoading(true);\n            const res = await axios.get('https://jsonplaceholder.typicode.com/photos?_limit=100');\n            setPosts(res.data);\n            setLoading(false);\n        }\n        fetchPosts();\n    }, []);\n\n    const indexLastPosts = currentPage * postPerPage;\n    const indexFirstPosts = indexLastPosts - postPerPage;\n    const currentPosts = posts.slice(indexFirstPosts, indexLastPosts)\n\n\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\n    const paginateLength = Math.ceil(posts.length / postPerPage);\n\n    return (\n        <div className=\"container mt-5\">\n            <h1 className=\"text-primary mb-3\">My blog</h1>\n\n            <Pagination totalPosts={paginateLength} paginate={paginate}/>\n            <Posts posts={currentPosts} loading={loading}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}